{"ast":null,"code":"// Handles fetching, creating, and updating listings (API calls)\n\nimport { API_URL } from '../config';\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('token');\n  return {\n    'Authorization': `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  };\n};\nexport const getListings = async () => {\n  const response = await fetch(`${API_URL}/listings`, {\n    headers: getAuthHeaders()\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch listings');\n  }\n  return response.json();\n};\nexport const createListing = async data => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    throw new Error('Authentication required');\n  }\n  const response = await fetch(`${API_URL}/listings`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(data)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to create listing');\n  }\n  return response.json();\n};\nexport const updateListing = async (id, data) => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    throw new Error('Authentication required');\n  }\n  const response = await fetch(`${API_URL}/listings/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(data)\n  });\n  if (!response.ok) {\n    throw new Error('Failed to update listing');\n  }\n  return response.json();\n};\nexport const deleteListing = async id => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    throw new Error('Authentication required');\n  }\n  const response = await fetch(`${API_URL}/listings/${id}`, {\n    method: 'DELETE',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to delete listing');\n  }\n};\nexport const updateListingStatus = async (id, status) => {\n  const response = await fetch(`${API_URL}/listings/${id}/status`, {\n    method: 'PATCH',\n    headers: getAuthHeaders(),\n    body: JSON.stringify({\n      status\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Failed to update listing status');\n  }\n};\nexport const getUserListings = async () => {\n  const response = await fetch(`${API_URL}/listings/user`, {\n    headers: getAuthHeaders()\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch user listings');\n  }\n  return response.json();\n};\nexport const uploadImages = async files => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    throw new Error('Authentication required');\n  }\n  const formData = new FormData();\n  files.forEach(file => {\n    formData.append('images', file);\n  });\n  const response = await fetch(`${API_URL}/listings/upload`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error('Failed to upload images');\n  }\n  const data = await response.json();\n  return data.urls;\n};","map":{"version":3,"names":["API_URL","getAuthHeaders","token","localStorage","getItem","getListings","response","fetch","headers","ok","Error","json","createListing","data","method","body","JSON","stringify","updateListing","id","deleteListing","updateListingStatus","status","getUserListings","uploadImages","files","formData","FormData","forEach","file","append","urls"],"sources":["/Users/hannahchoi/tigerpop.github.io/frontend/src/services/listingService.ts"],"sourcesContent":["// Handles fetching, creating, and updating listings (API calls)\n\nimport { API_URL } from '../config';\nimport { getToken } from './authService';\n\nexport interface Listing {\n  id: number;\n  title: string;\n  description: string;\n  price: number;\n  images: string[];\n  user_id: number;\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport interface CreateListingData {\n  title: string;\n  description: string;\n  price: number;\n  image_urls?: string[];\n}\n\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem('token');\n  return {\n    'Authorization': `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  };\n};\n\nexport const getListings = async (): Promise<Listing[]> => {\n  const response = await fetch(`${API_URL}/listings`, {\n    headers: getAuthHeaders()\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch listings');\n  }\n  return response.json();\n};\n\nexport const createListing = async (data: CreateListingData): Promise<Listing> => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    throw new Error('Authentication required');\n  }\n\n  const response = await fetch(`${API_URL}/listings`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(data)\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to create listing');\n  }\n\n  return response.json();\n};\n\nexport const updateListing = async (id: number, data: Partial<CreateListingData>): Promise<Listing> => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    throw new Error('Authentication required');\n  }\n\n  const response = await fetch(`${API_URL}/listings/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify(data)\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to update listing');\n  }\n\n  return response.json();\n};\n\nexport const deleteListing = async (id: number): Promise<void> => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    throw new Error('Authentication required');\n  }\n\n  const response = await fetch(`${API_URL}/listings/${id}`, {\n    method: 'DELETE',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to delete listing');\n  }\n};\n\nexport const updateListingStatus = async (id: number, status: string): Promise<void> => {\n  const response = await fetch(`${API_URL}/listings/${id}/status`, {\n    method: 'PATCH',\n    headers: getAuthHeaders(),\n    body: JSON.stringify({ status }),\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to update listing status');\n  }\n};\n\nexport const getUserListings = async (): Promise<Listing[]> => {\n  const response = await fetch(`${API_URL}/listings/user`, {\n    headers: getAuthHeaders(),\n  });\n  \n  if (!response.ok) {\n    throw new Error('Failed to fetch user listings');\n  }\n  \n  return response.json();\n};\n\nexport const uploadImages = async (files: File[]): Promise<string[]> => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    throw new Error('Authentication required');\n  }\n\n  const formData = new FormData();\n  files.forEach(file => {\n    formData.append('images', file);\n  });\n\n  const response = await fetch(`${API_URL}/listings/upload`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    body: formData\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to upload images');\n  }\n\n  const data = await response.json();\n  return data.urls;\n};\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}