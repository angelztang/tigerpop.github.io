{"ast":null,"code":"// Handles fetching, creating, and updating listings (API calls)\n\nimport { API_URL } from '../config';\nimport { getToken } from './authService';\nconst getAuthHeaders = () => {\n  const token = getToken();\n  return {\n    'Authorization': token ? `Bearer ${token}` : '',\n    'Content-Type': 'application/json'\n  };\n};\nexport const getListings = async (queryString = '') => {\n  try {\n    const url = queryString.startsWith('/api') ? `${API_URL}${queryString.substring(4)}` : `${API_URL}/listings${queryString}`;\n    const response = await fetch(url, {\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch listings');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching listings:', error);\n    throw error;\n  }\n};\nexport const createListing = async data => {\n  try {\n    // Use default user ID (1) if no user is logged in\n    const listingData = {\n      ...data,\n      user_id: data.user_id || 1\n    };\n    const response = await fetch(`${API_URL}/listings`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(listingData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create listing');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error creating listing:', error);\n    throw error;\n  }\n};\nexport const updateListing = async (id, data) => {\n  try {\n    const response = await fetch(`${API_URL}/listings/${id}`, {\n      method: 'PUT',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update listing');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error updating listing:', error);\n    throw error;\n  }\n};\nexport const deleteListing = async id => {\n  try {\n    const response = await fetch(`${API_URL}/listings/${id}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete listing');\n    }\n  } catch (error) {\n    console.error('Error deleting listing:', error);\n    throw error;\n  }\n};\nexport const updateListingStatus = async (id, status) => {\n  try {\n    const response = await fetch(`${API_URL}/listings/${id}/status`, {\n      method: 'PATCH',\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        status\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update listing status');\n    }\n  } catch (error) {\n    console.error('Error updating listing status:', error);\n    throw error;\n  }\n};\nexport const getUserListings = async () => {\n  try {\n    const response = await fetch(`${API_URL}/listings/user`, {\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch user listings');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching user listings:', error);\n    throw error;\n  }\n};\nexport const uploadImages = async files => {\n  try {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('images', file);\n    });\n    const token = getToken();\n    if (!token) {\n      throw new Error('You must be logged in to upload images');\n    }\n    console.log('Uploading images to:', `${API_URL}/listings/upload`);\n    console.log('Number of files:', files.length);\n    const response = await fetch(`${API_URL}/listings/upload`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n      body: formData\n    });\n    console.log('Upload response status:', response.status);\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Upload error response:', errorText);\n      try {\n        const errorData = JSON.parse(errorText);\n        throw new Error((errorData === null || errorData === void 0 ? void 0 : errorData.message) || (errorData === null || errorData === void 0 ? void 0 : errorData.msg) || 'Failed to upload images');\n      } catch (e) {\n        throw new Error(`Failed to upload images: ${errorText}`);\n      }\n    }\n    const data = await response.json();\n    console.log('Upload success, received URLs:', data.urls);\n    return data.urls;\n  } catch (error) {\n    console.error('Detailed upload error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","getToken","getAuthHeaders","token","getListings","queryString","url","startsWith","substring","response","fetch","headers","ok","Error","json","error","console","createListing","data","listingData","user_id","method","body","JSON","stringify","updateListing","id","deleteListing","updateListingStatus","status","getUserListings","uploadImages","files","formData","FormData","forEach","file","append","log","length","errorText","text","errorData","parse","message","msg","e","urls"],"sources":["/Users/hannahchoi/tigerpop.github.io/frontend/src/services/listingService.ts"],"sourcesContent":["// Handles fetching, creating, and updating listings (API calls)\n\nimport { API_URL } from '../config';\nimport { getToken } from './authService';\n\nexport interface Listing {\n  id: number;\n  title: string;\n  description: string;\n  price: number;\n  images: string[];\n  category: string;\n  user_id: number;\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport interface CreateListingData {\n  title: string;\n  description: string;\n  price: number;\n  category?: string;\n  image_urls?: string[];\n  user_id?: number;\n}\n\nconst getAuthHeaders = () => {\n  const token = getToken();\n  return {\n    'Authorization': token ? `Bearer ${token}` : '',\n    'Content-Type': 'application/json'\n  };\n};\n\nexport const getListings = async (queryString: string = ''): Promise<Listing[]> => {\n  try {\n    const url = queryString.startsWith('/api') \n      ? `${API_URL}${queryString.substring(4)}` \n      : `${API_URL}/listings${queryString}`;\n    \n    const response = await fetch(url, {\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch listings');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching listings:', error);\n    throw error;\n  }\n};\n\nexport const createListing = async (data: CreateListingData): Promise<Listing> => {\n  try {\n    // Use default user ID (1) if no user is logged in\n    const listingData = {\n      ...data,\n      user_id: data.user_id || 1\n    };\n\n    const response = await fetch(`${API_URL}/listings`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(listingData)\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to create listing');\n    }\n\n    return response.json();\n  } catch (error) {\n    console.error('Error creating listing:', error);\n    throw error;\n  }\n};\n\nexport const updateListing = async (id: number, data: Partial<CreateListingData>): Promise<Listing> => {\n  try {\n    const response = await fetch(`${API_URL}/listings/${id}`, {\n      method: 'PUT',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(data)\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to update listing');\n    }\n\n    return response.json();\n  } catch (error) {\n    console.error('Error updating listing:', error);\n    throw error;\n  }\n};\n\nexport const deleteListing = async (id: number): Promise<void> => {\n  try {\n    const response = await fetch(`${API_URL}/listings/${id}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders()\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to delete listing');\n    }\n  } catch (error) {\n    console.error('Error deleting listing:', error);\n    throw error;\n  }\n};\n\nexport const updateListingStatus = async (id: number, status: string): Promise<void> => {\n  try {\n    const response = await fetch(`${API_URL}/listings/${id}/status`, {\n      method: 'PATCH',\n      headers: getAuthHeaders(),\n      body: JSON.stringify({ status }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to update listing status');\n    }\n  } catch (error) {\n    console.error('Error updating listing status:', error);\n    throw error;\n  }\n};\n\nexport const getUserListings = async (): Promise<Listing[]> => {\n  try {\n    const response = await fetch(`${API_URL}/listings/user`, {\n      headers: getAuthHeaders(),\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch user listings');\n    }\n    \n    return response.json();\n  } catch (error) {\n    console.error('Error fetching user listings:', error);\n    throw error;\n  }\n};\n\nexport const uploadImages = async (files: File[]): Promise<string[]> => {\n  try {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('images', file);\n    });\n\n    const token = getToken();\n    if (!token) {\n      throw new Error('You must be logged in to upload images');\n    }\n\n    console.log('Uploading images to:', `${API_URL}/listings/upload`);\n    console.log('Number of files:', files.length);\n\n    const response = await fetch(`${API_URL}/listings/upload`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`\n      },\n      body: formData\n    });\n\n    console.log('Upload response status:', response.status);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Upload error response:', errorText);\n      try {\n        const errorData = JSON.parse(errorText);\n        throw new Error(errorData?.message || errorData?.msg || 'Failed to upload images');\n      } catch (e) {\n        throw new Error(`Failed to upload images: ${errorText}`);\n      }\n    }\n\n    const data = await response.json();\n    console.log('Upload success, received URLs:', data.urls);\n    return data.urls;\n  } catch (error) {\n    console.error('Detailed upload error:', error);\n    throw error;\n  }\n};\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}