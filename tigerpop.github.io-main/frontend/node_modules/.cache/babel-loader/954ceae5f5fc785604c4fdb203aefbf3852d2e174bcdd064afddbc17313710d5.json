{"ast":null,"code":"// Handles fetching, creating, and updating listings (API calls)\n\nimport { API_URL } from '../config';\nimport { getToken } from './authService';\nconst getAuthHeaders = () => {\n  const token = getToken();\n  return {\n    'Authorization': `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  };\n};\nexport const getListings = async () => {\n  try {\n    const response = await fetch(`${API_URL}/listings`, {\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch listings');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching listings:', error);\n    throw error;\n  }\n};\nexport const createListing = async data => {\n  try {\n    const response = await fetch(`${API_URL}/listings`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create listing');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error creating listing:', error);\n    throw error;\n  }\n};\nexport const updateListing = async (id, data) => {\n  try {\n    const response = await fetch(`${API_URL}/listings/${id}`, {\n      method: 'PUT',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update listing');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error updating listing:', error);\n    throw error;\n  }\n};\nexport const deleteListing = async id => {\n  try {\n    const response = await fetch(`${API_URL}/listings/${id}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete listing');\n    }\n  } catch (error) {\n    console.error('Error deleting listing:', error);\n    throw error;\n  }\n};\nexport const updateListingStatus = async (id, status) => {\n  try {\n    const response = await fetch(`${API_URL}/listings/${id}/status`, {\n      method: 'PATCH',\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        status\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update listing status');\n    }\n  } catch (error) {\n    console.error('Error updating listing status:', error);\n    throw error;\n  }\n};\nexport const getUserListings = async () => {\n  try {\n    const response = await fetch(`${API_URL}/listings/user`, {\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch user listings');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching user listings:', error);\n    throw error;\n  }\n};\nexport const uploadImages = async files => {\n  try {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('images', file);\n    });\n    const response = await fetch(`${API_URL}/listings/upload`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${getToken()}`\n      },\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error('Failed to upload images');\n    }\n    const data = await response.json();\n    return data.urls;\n  } catch (error) {\n    console.error('Error uploading images:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_URL","getToken","getAuthHeaders","token","getListings","response","fetch","headers","ok","Error","json","error","console","createListing","data","method","body","JSON","stringify","updateListing","id","deleteListing","updateListingStatus","status","getUserListings","uploadImages","files","formData","FormData","forEach","file","append","urls"],"sources":["/Users/hannahchoi/tigerpop.github.io/frontend/src/services/listingService.ts"],"sourcesContent":["// Handles fetching, creating, and updating listings (API calls)\n\nimport { API_URL } from '../config';\nimport { getToken } from './authService';\n\nexport interface Listing {\n  id: number;\n  title: string;\n  description: string;\n  price: number;\n  images: string[];\n  user_id: number;\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport interface CreateListingData {\n  title: string;\n  description: string;\n  price: number;\n  image_urls?: string[];\n}\n\nconst getAuthHeaders = () => {\n  const token = getToken();\n  return {\n    'Authorization': `Bearer ${token}`,\n    'Content-Type': 'application/json'\n  };\n};\n\nexport const getListings = async (): Promise<Listing[]> => {\n  try {\n    const response = await fetch(`${API_URL}/listings`, {\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch listings');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching listings:', error);\n    throw error;\n  }\n};\n\nexport const createListing = async (data: CreateListingData): Promise<Listing> => {\n  try {\n    const response = await fetch(`${API_URL}/listings`, {\n      method: 'POST',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(data)\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to create listing');\n    }\n\n    return response.json();\n  } catch (error) {\n    console.error('Error creating listing:', error);\n    throw error;\n  }\n};\n\nexport const updateListing = async (id: number, data: Partial<CreateListingData>): Promise<Listing> => {\n  try {\n    const response = await fetch(`${API_URL}/listings/${id}`, {\n      method: 'PUT',\n      headers: getAuthHeaders(),\n      body: JSON.stringify(data)\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to update listing');\n    }\n\n    return response.json();\n  } catch (error) {\n    console.error('Error updating listing:', error);\n    throw error;\n  }\n};\n\nexport const deleteListing = async (id: number): Promise<void> => {\n  try {\n    const response = await fetch(`${API_URL}/listings/${id}`, {\n      method: 'DELETE',\n      headers: getAuthHeaders()\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to delete listing');\n    }\n  } catch (error) {\n    console.error('Error deleting listing:', error);\n    throw error;\n  }\n};\n\nexport const updateListingStatus = async (id: number, status: string): Promise<void> => {\n  try {\n    const response = await fetch(`${API_URL}/listings/${id}/status`, {\n      method: 'PATCH',\n      headers: getAuthHeaders(),\n      body: JSON.stringify({ status }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to update listing status');\n    }\n  } catch (error) {\n    console.error('Error updating listing status:', error);\n    throw error;\n  }\n};\n\nexport const getUserListings = async (): Promise<Listing[]> => {\n  try {\n    const response = await fetch(`${API_URL}/listings/user`, {\n      headers: getAuthHeaders(),\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch user listings');\n    }\n    \n    return response.json();\n  } catch (error) {\n    console.error('Error fetching user listings:', error);\n    throw error;\n  }\n};\n\nexport const uploadImages = async (files: File[]): Promise<string[]> => {\n  try {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('images', file);\n    });\n\n    const response = await fetch(`${API_URL}/listings/upload`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${getToken()}`\n      },\n      body: formData\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to upload images');\n    }\n\n    const data = await response.json();\n    return data.urls;\n  } catch (error) {\n    console.error('Error uploading images:', error);\n    throw error;\n  }\n};\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}