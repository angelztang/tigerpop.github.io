{"ast":null,"code":"// Handles fetching, creating, and updating listings (API calls)\n\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nexport const getListings = async filters => {\n  const url = filters ? `${API_URL}/api/listing${filters}` : `${API_URL}/api/listing`;\n  const response = await axios.get(url);\n  return response.data;\n};\nexport const getListing = async id => {\n  const response = await axios.get(`${API_URL}/api/listing/${id}`);\n  return response.data;\n};\nexport const createListing = async data => {\n  const response = await axios.post(`${API_URL}/api/listing`, data);\n  return response.data;\n};\nexport const updateListing = async (id, data) => {\n  const response = await axios.put(`${API_URL}/api/listing/${id}`, data);\n  return response.data;\n};\nexport const updateListingStatus = async (id, status) => {\n  const response = await axios.patch(`${API_URL}/api/listing/${id}/status`, {\n    status\n  });\n  return response.data;\n};\nexport const deleteListing = async id => {\n  await axios.delete(`${API_URL}/api/listing/${id}`);\n};\nexport const uploadImages = async files => {\n  try {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('images', file);\n    });\n    const response = await axios.post(`${API_URL}/api/listing/upload`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    if (!response.data.urls || !Array.isArray(response.data.urls)) {\n      throw new Error('Invalid response format from server');\n    }\n    return response.data.urls;\n  } catch (error) {\n    console.error('Error uploading images:', error);\n    throw error;\n  }\n};\nexport const getCategories = async () => {\n  const response = await axios.get(`${API_URL}/api/listing/categories`);\n  return response.data;\n};\nexport const getUserListings = async userId => {\n  const response = await axios.get(`${API_URL}/api/listing/user?user_id=${userId}`);\n  return response.data;\n};\nexport const requestToBuy = async (listingId, message, contactInfo) => {\n  try {\n    await axios.post(`${API_URL}/api/listing/${listingId}/request`, {\n      message,\n      contact_info: contactInfo\n    });\n  } catch (error) {\n    console.error('Error requesting to buy:', error);\n    throw error;\n  }\n};\nexport const getUserPurchases = async () => {\n  const response = await axios.get(`${API_URL}/api/listing/purchases`);\n  return response.data;\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","getListings","filters","url","response","get","data","getListing","id","createListing","post","updateListing","put","updateListingStatus","status","patch","deleteListing","delete","uploadImages","files","formData","FormData","forEach","file","append","headers","urls","Array","isArray","Error","error","console","getCategories","getUserListings","userId","requestToBuy","listingId","message","contactInfo","contact_info","getUserPurchases"],"sources":["/Users/hannahchoi/tigerpop.github.io/frontend/src/services/listingService.ts"],"sourcesContent":["// Handles fetching, creating, and updating listings (API calls)\n\nimport axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nexport interface Listing {\n  id: number;\n  title: string;\n  description: string;\n  price: number;\n  category: string;\n  status: string;\n  user_id: number;\n  created_at: string;\n  images: string[];\n}\n\nexport interface CreateListingData {\n  title: string;\n  description: string;\n  price: number;\n  category: string;\n  images: string[];\n  user_id: number;\n}\n\nexport interface ListingFilters {\n  max_price?: number;\n  min_price?: number;\n  category?: string;\n  condition?: string;\n  search?: string;\n  include_sold?: boolean;\n}\n\nexport const getListings = async (filters?: string): Promise<Listing[]> => {\n  const url = filters ? `${API_URL}/api/listing${filters}` : `${API_URL}/api/listing`;\n  const response = await axios.get<Listing[]>(url);\n  return response.data;\n};\n\nexport const getListing = async (id: number): Promise<Listing> => {\n  const response = await axios.get<Listing>(`${API_URL}/api/listing/${id}`);\n  return response.data;\n};\n\nexport const createListing = async (data: CreateListingData): Promise<Listing> => {\n  const response = await axios.post<Listing>(`${API_URL}/api/listing`, data);\n  return response.data;\n};\n\nexport const updateListing = async (id: number, data: Partial<Listing>): Promise<Listing> => {\n  const response = await axios.put<Listing>(`${API_URL}/api/listing/${id}`, data);\n  return response.data;\n};\n\nexport const updateListingStatus = async (id: number, status: 'available' | 'sold'): Promise<Listing> => {\n  const response = await axios.patch<Listing>(`${API_URL}/api/listing/${id}/status`, { status });\n  return response.data;\n};\n\nexport const deleteListing = async (id: number): Promise<void> => {\n  await axios.delete(`${API_URL}/api/listing/${id}`);\n};\n\nexport const uploadImages = async (files: File[]): Promise<string[]> => {\n  try {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('images', file);\n    });\n\n    const response = await axios.post<{ urls: string[] }>(`${API_URL}/api/listing/upload`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n\n    if (!response.data.urls || !Array.isArray(response.data.urls)) {\n      throw new Error('Invalid response format from server');\n    }\n\n    return response.data.urls;\n  } catch (error) {\n    console.error('Error uploading images:', error);\n    throw error;\n  }\n};\n\nexport const getCategories = async (): Promise<string[]> => {\n  const response = await axios.get<string[]>(`${API_URL}/api/listing/categories`);\n  return response.data;\n};\n\nexport const getUserListings = async (userId: string): Promise<Listing[]> => {\n  const response = await axios.get<Listing[]>(`${API_URL}/api/listing/user?user_id=${userId}`);\n  return response.data;\n};\n\nexport const requestToBuy = async (listingId: number, message: string, contactInfo: string): Promise<void> => {\n  try {\n    await axios.post(`${API_URL}/api/listing/${listingId}/request`, {\n      message,\n      contact_info: contactInfo\n    });\n  } catch (error) {\n    console.error('Error requesting to buy:', error);\n    throw error;\n  }\n};\n\nexport const getUserPurchases = async (): Promise<Listing[]> => {\n  const response = await axios.get<Listing[]>(`${API_URL}/api/listing/purchases`);\n  return response.data;\n};\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}